#可省略步骤，主要看看效果
#上面一段还需要研究一下，是否删除
img_vertical_flipped.save("path_to_save_vertical_flipped.png")
img_horizontal_flipped.save("path_to_save_horizontal_flipped.png")
jittered_image.save('path_to_save_jittered_image.png')
input_image_path = "path_to_input_image.jpg"
cropped_image = smart_crop(input_image_path)
cv2.imwrite("path_to_save_cropped_image.jpg", cropped_image)
​
#resized_image.save('path_to_save_resized_image.png')
---------------------------------------------------------------------------
SystemError                               Traceback (most recent call last)
/tmp/ipykernel_15/983763879.py in <module>
      5 jittered_image.save('path_to_save_jittered_image.png')
      6 input_image_path = "path_to_input_image.jpg"
----> 7 cropped_image = smart_crop(img)
      8 cv2.imwrite("path_to_save_cropped_image.jpg", cropped_image)
      9 

/tmp/ipykernel_15/499002288.py in smart_crop(image_path, output_dim)
     12 
     13 def smart_crop(image_path, output_dim=(100, 100)):
---> 14     sal_map = saliency_map(image_path)
     15     thresh_map = cv2.threshold(sal_map.astype('uint8'), 0, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)[1]
     16 

/tmp/ipykernel_15/499002288.py in saliency_map(image_path)
      1 def saliency_map(image_path):
----> 2     image = cv2.imread(image_path)
      3     gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
      4 
      5     # Compute the saliency

SystemError: <built-in function imread> returned NULL without setting an error